PROJECT: Person Class Hierarchy in React
1) Technologies Used:
  a) React: For building the user interface with a component-based architecture.
  b) JavaScript (ES6+): For the core logic, specifically using ES6 Classes for Object-Oriented Programming.
  c) CSS3: For styling the components to present the information clearly.
  d) Vite: As the build tool for a fast development environment.

2) Project Overview:
  a) In this project, I explored the core Object-Oriented Programming (OOP) concept of inheritance in JavaScript.
  b) The goal was to create a base Person class and extend it into more specialized subclasses, Student and Teacher, to understand how properties and methods are inherited and overridden.
  c) The final output is displayed in a clean, yellow-themed card-based UI built with React, styled using a customized App.css.
  d) This is a foundational concept crucial for building scalable and organized applications, where you can create reusable and extensible code structures.
  
4) Structure:
a) JavaScript Class Hierarchy:
  The foundation of the project is the class structure. I started with a generic base class and then created specialized versions.

  i) Base Person Class:
    This class acts as the blueprint, containing common properties (name, age) and a method (getInfo) shared by all subclasses.
     
    SNIPPET (ClassHierarchyDemo.jsx):
      class Person {
        constructor(name, age) {
          this.name = name;
          this.age = age;
        }
        getInfo() {
          return `Name: ${this.name}, Age: ${this.age}`;
        }
      }

  ii) Student and Teacher Subclasses:
    These classes inherit from Person using the extends keyword.
    They add their own unique properties (grade for Student, subject for Teacher) and override the getInfo method 
   
      SNIPPET (ClassHierarchyDemo.jsx):
       class Student extends Person {
        constructor(name, age, grade) {
          super(name, age); // Calls the Person constructor
          this.grade = grade;
        }
        getInfo() {
          return `${super.getInfo()}, Grade: ${this.grade}`;
        }
      }


b) React Components:
 To display the results, I structured the UI into simple, reusable components.

   i) ClassHierarchyDemo.jsx
    This is the main component. It contains the class definitions and creates instances of Student and Teacher.

      SNIPPET (ClassHierarchyDemo.jsx):

      function ClassHierarchyDemo() {
        const student = new Student('Alice', 15, '10th');
        const teacher = new Teacher('Mr. Smith', 45, 'Mathematics');

        return (
          <div className="card">
            <h1>Person Class Hierarchy Demo</h1>
            <PersonCard
              title="Student Instance Details"
              details={student.getInfo()}
            />
            <PersonCard
              title="Teacher Instance Details"
              details={teacher.getInfo()}
            />
          </div>
        );
      }


    ii) PersonCard.jsx
      A reusable card UI component that takes a title and details as props and displays them with the new yellow-styled theme.

    SNIPPET (Usage in ClassHierarchyDemo.jsx):

      <PersonCard 
        title="Student Instance Details" 
        details={student.getInfo()} 
      />

        
    iii) App.jsx and App.css
      The App.jsx serves as the entry point that renders the ClassHierarchyDemo component.
      The new App.css provides a yellow-themed UI with:
      A light yellow background (#fffbea)
      Golden borders and shadows for cards
      Highlight effects on person details with pale yellow boxes

    SNIPPET (App.jsx):

      import ClassHierarchyDemo from './components/ClassHierarchyDemo';
      import './App.css';
      function App() {
        return (
          <div className="container">
            <ClassHierarchyDemo />
          </div>
        );
      }

5) Learning Outcomes:
  a) Gained a practical understanding of how to implement Inheritance in modern JavaScript using ES6 classes.
  b) Learned to use the extends and super keywords to create subclasses and properly initialize them.
  c) Understood the concept of Method Overriding, where a subclass provides a specific implementation of a parent method.
  d) Practiced structuring a React application by breaking down the UI into smaller, manageable components.

6) Key Concepts:
  a) Object-Oriented Programming (OOP) in JavaScript
  c) Inheritance (extends, super)
  d) Method Overriding
  e) React Component Architecture
  f) Props for Data Flow
  g) CSS Styling for Theming
