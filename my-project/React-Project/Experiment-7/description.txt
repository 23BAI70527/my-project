PROJECT: ProductCard Component Using Props

1) Technologies Used:
    a) React: For creating a component-based user interface to display product information.
    b) JavaScript (ES6+): For defining data structures (product objects) and passing them through the application.
    c) CSS3: For professional styling of the product cards, layout, and overall presentation.
    d) Vite: As the modern build tool for a fast development environment.


2) Project Overview:
    a) This project focuses on the fundamental React concept of creating reusable components to display a list of product data.
    b) I built an application that renders multiple product cards on a page, with each card showing details like the product's name, price, and stock availability.
    c) The UI is styled to be clean and modern, with hover effects on the cards to provide a better user experience.


4) Structure (Updated with App.css)
    i) App.jsx (Data Source & Container)
        Role: Parent component. Holds product data as objects and passes them as props to ProductCard.

        Snippet:
        import './App.css';
        import ProductCard from './Components/product_card';
        function App() {
          const product1 = {
            name: "Wireless Mouse",
            price: 25.99,
            instock: true
          };
          // ... more product objects
          return (
            <div className="app-wrapper">
              <h1 className="main-title">Products List</h1>
              <div className="products-container">
                <ProductCard product={product1} />
                {/* ... more product cards */}
              </div>
            </div>
          );
        }

    ii) product_card.jsx (Reusable Presentational Component)
        Role: Child component. Purely presentational. Receives a product object and displays it.

    Snippet:
        import React from 'react';
        function ProductCard({ product }) {
          return (
            <div className="product-card">
              <h3 className="product-name">{product.name}</h3>
              <p className="product-price">Price: ${product.price}</p>
              <p className="product-status">
                Status: {product.instock ? 'In Stock' : 'Out of Stock'}
              </p>
            </div>
          );
        }
        export default ProductCard;

    iii) App.css (Styling File for Layout & Components)
        Role: Handles global styles, page layout, and product card styling.

        Key Styling Features:
        body: Defines global background, font, and layout.
        .container: Centers the entire app both vertically and horizontally.
        .heading: Styles the title with larger, bold text.
        .products: Flexbox layout with spacing between product cards.
        .card: Clean, minimal card design with border, rounded corners, padding, and shadows.
        .card h3 & .card p: Typography for product name, price, and stock status.

5) Learning Outcomes:
    a) Solidified my understanding of creating and structuring functional components in React.
    b) Mastered the concept of passing data from a parent to a child component using props.
    c) Learned how to make components reusable by designing them to accept and display data dynamically.
    d) Practiced using JavaScript expressions and conditional rendering (specifically with a ternary operator) directly within JSX.

6) Key Concepts:
    a) React Functional Components
    b) JSX for UI Rendering
    c) Props for Parent-to-Child Data Communication
    d) CSS Styling in a React Application
