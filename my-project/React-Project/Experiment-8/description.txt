PROJECT: Library Management UI with Search, Add, and Remove Book Functionality
1) Technologies Used:
a) React: For building a dynamic and component-based user interface.
b) JavaScript (ES6+): For handling the application's logic, state, and user interactions.
c) CSS3: For styling the components with a modern cream/pink/skyblue theme.
d) Vite: As the build tool for a fast and modern development workflow.

2) Project Overview:
a) This project is an interactive single-page application for managing a book library.
b) It demonstrates core React principles by allowing users to view, search, add, and remove books dynamically, without any page reloads.
c) The primary goal was to practice state management, event handling, and component communication in a real-world scenario.
d) The final UI has a soft cream background, white card container, and colorful pink/skyblue buttons, making the interface clean and engaging.
e) This application serves as a strong foundation for building data-driven React UIs.

4) Structure:
React Components & State Management
The app is built around a central stateful container (LibraryManagement.jsx) and small stateless presentational components.

i) LibraryManagement.jsx (Stateful Container)
Holds the books array and searchQuery state using useState.
Handles adding, removing, and filtering books.

  SNIPPET (LibraryManagement.jsx):
    function LibraryManagement() {
      const [books, setBooks] = useState([
        { id: 1, title: '1984', author: 'George Orwell' },
        // ... more books
      ]);
      const [searchQuery, setSearchQuery] = useState('');
      const handleAddBook = ({ title, author }) => {
        // logic to add book
      };
      const handleRemoveBook = (idToRemove) => {
        // logic to remove book
       };
      // ... filtering logic + JSX
    }


ii) SearchBar.jsx (Controlled Component)
Takes searchQuery and an update function as props.

  SNIPPET (SearchBar.jsx):

    function SearchBar({ searchQuery, onSearchChange }) {
      return (
        <input
          type="text"
          placeholder="Search by title or author"
          value={searchQuery}
          onChange={(e) => onSearchChange(e.target.value)}
        />
      );
    }


iii) AddBookForm.jsx (Form Handling)
Maintains internal state for title and author. Calls parent function on form submit.

  SNIPPET (AddBookForm.jsx):

    function AddBookForm({ onAddBook }) {
      const [title, setTitle] = useState('');
      const [author, setAuthor] = useState('');
      const handleSubmit = (e) => {
        e.preventDefault();
        onAddBook({ title, author });
        // clear fields
      };
      // ... form JSX
    }

iv) BookList.jsx & BookItem.jsx (Dynamic Rendering)
BookList: Maps through filtered books, rendering each as a BookItem.
BookItem: Displays title + author and has a pink “Remove” button.

  SNIPPET (BookItem.jsx):

    function BookItem({ book, onRemove }) {
      return (
        <div className="book-item">
          <span>
            <strong className="book-title">{book.title}</strong> by {book.author}
          </span>
          <button onClick={() => onRemove(book.id)}>Remove</button>
        </div>
      );
    }


5) Learning Outcomes:
a) Mastered the useState hook for managing and updating state.
b) Learned component-based architecture, breaking UI into reusable pieces.
c) Understood lifting state up and passing functions/data with props.
d) Implemented event handling for forms (onSubmit), inputs (onChange), and buttons (onClick).
e) Practiced dynamic rendering with .filter() and .map().
f) Styled React components with a custom cream/pink/skyblue theme.

6) Key Concepts:
a) React State Management (useState)
b) Component Composition & Reusability
c) Props for Unidirectional Data Flow
d) Controlled Components for Forms/Inputs
e) Handling User Events
f) Conditional & List Rendering (.filter, .map)
g) Custom Theming with CSS (cream background + colorful buttons)
